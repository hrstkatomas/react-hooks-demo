// HOOKS STEP 16: Further extraction
// Comparison, hooks gives you ability to create custom abstractions that do not inflate react component tree and avoid the wrapper hell

// HOOKS STEP 15: Hook calls are just function calls, components are just functions
// How do you extract it? You use another function
// This function is called custom hook, convention is: names start with "use" due to linting and indicating statefullness

// HOOKS STEP 14: How do we do this with hooks?
// subscribing to the window width event is conceptially different thing, so we can separate it to another useEffect hook
// also cleaning up is conceptually part of this effect, so effect has a cleanup phase
// use effect will resubscribe on every rerender so there is an optional parameter dependency parameter to specify when to run it again

// COMPONENTA: STEP 13: Other thing we would like to use life cycle methods are subsribtions so lets say we would like to monitor the window width

// HOOKS STEP 12: How do we do this with hooks? Ability to perform sideeffect is other great feature of class components
// so if we want to use effect, we just useEffect
// compare, we have ability to access state variables easily because they are allready in context of function, we can set them easily

// COMPONENTAL STEP 11: Now when I edit name, it does not get updated because I also need to implement componentDidUpdate

// COMPONENTAL STEP 10: Other thing that you might want to reach are live cycle methods for imerative DOM mutation or calling browser APIs
// you cannont do it during render because its not rendered yet, so the way to create side effects in react are live cycle methods

// HOOKS STEP 9: Now lets take a look how do we do it with hooks
// This not only reads the context, it also subscribes to the changes of the value
// Compare after
// How does react know that first call of useState coresponds to the name? It relies on the order of useState calls
// for hoos to work properly, you cannot call them in any condition, they have to be on top of the component
// this is an unusual restriction, but it allows some tricks that can be used later

// COMPONENTAL STEP 8: Back to class example: next thing we would like to do is to read context
// import theme and locale context, mention render prop API and implement consuming of theme and locale context

// HOOKS STEP 7: How do we do this with hooks?

// COMPONENTAL STEP 6: Add surname

// HOOKS STEP 5: What if I could just useState

// HOOKS STEP 4: They are related, put them toggether, where do i get them from?

// HOOKS STEP 3: Not sure how to do it in functional component

// COMPONENTAL STEP 2: Make persons name editable

// STEP 1: Render a persons name
